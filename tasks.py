from robocorp.tasks import task
import os
import pdfplumber
import requests
import json

# TODO: install "ollama run llama3.2:1b" to test a smaller model. The current Phi-3 is too large for the computer to handle. Alternatively use the azure-openai API

@task
def main():
    """
    Main function to start the PDF processing.
    """
    # Check if the PDF directory exists
    if not os.path.isdir(PDF_DIR):
        print(f"PDF directory does not exist: {PDF_DIR}")
        return

    # Start processing
    process_pdfs()

    print("\nProcessing completed.")




# --------------------------- Configuration --------------------------- #

# Path to the directory containing your PDF files
PDF_DIR = "pdf_input"  # <-- Replace with your PDF directory path

# Path to the directory where you want to save the output files
OUTPUT_DIR = "pdf_output"  # <-- Replace with your desired output directory

# Name of the Ollama model you want to use
OLLAMA_MODEL = "phi3:latest"  # <-- Replace with your Ollama model name

# Ollama API endpoint
OLLAMA_ENDPOINT = "http://localhost:11434/api/generate"  # As specified

# Type of processing you want to perform: "summarize" or "extract_emails"
PROCESSING_TYPE = "summarize"  # <-- Choose between 'summarize' or 'extract_emails'

# ---------------------------------------------------------------------- #


def extract_text(pdf_path):
    """
    Extract text from a text-based PDF using pdfplumber.

    Args:
        pdf_path (str): Path to the PDF file.

    Returns:
        str: Extracted text from the PDF.
    """
    text = ""
    try:
        with pdfplumber.open(pdf_path) as pdf:
            for page_num, page in enumerate(pdf.pages, start=1):
                page_text = page.extract_text()
                if page_text:
                    text += f"--- Page {page_num} ---\n{page_text}\n"
                else:
                    print(f"Warning: No text found on page {page_num} of {pdf_path}.")
    except Exception as e:
        print(f"Error extracting text from {pdf_path}: {e}")
    return text


def query_ollama(input_text, model, endpoint_url):
    """
    Send a request to the Ollama server with the input text and return the response.

    Args:
        input_text (str): The text to send to the LLM.
        model (str): The Ollama model to use.
        endpoint_url (str): The Ollama server endpoint.

    Returns:
        str: The response from the LLM.
    """
    payload = {
        "model": model,
        "prompt": input_text
    }

    headers = {
        "Content-Type": "application/json"
    }

    try:
        response = requests.post(endpoint_url, json=payload, headers=headers, timeout=120)
        response.raise_for_status()  # Raises HTTPError for bad responses (4xx or 5xx)
        response_data = response.json()
        return response_data.get("response", "")
    except requests.exceptions.RequestException as e:
        print(f"Request to Ollama failed: {e}")
        return ""
    except json.JSONDecodeError:
        print("Failed to parse JSON response from Ollama.")
        return ""


def summarize_text(text, model, endpoint_url):
    """
    Generate a summary of the provided text using Ollama.

    Args:
        text (str): The text to summarize.
        model (str): The Ollama model to use.
        endpoint_url (str): The Ollama server endpoint.

    Returns:
        str: The summary generated by the LLM.
    """
    prompt = f"Please provide a concise summary of the following text:\n\n{text}"
    summary = query_ollama(prompt, model, endpoint_url)
    return summary


def extract_emails(text, model, endpoint_url):
    """
    Extract all email addresses from the provided text using Ollama.

    Args:
        text (str): The text from which to extract email addresses.
        model (str): The Ollama model to use.
        endpoint_url (str): The Ollama server endpoint.

    Returns:
        str: Extracted email addresses.
    """
    prompt = f"Extract all email addresses from the following text:\n\n{text}"
    emails = query_ollama(prompt, model, endpoint_url)
    return emails


def process_pdfs():
    """
    Process all PDF files in the specified directory:
    - Extract text from each PDF.
    - Process the extracted text with Ollama (e.g., summarize or extract emails).
    - Save the output to the specified output directory.
    """
    # Create the output directory if it doesn't exist
    if not os.path.exists(OUTPUT_DIR):
        try:
            os.makedirs(OUTPUT_DIR)
            print(f"Created output directory at {OUTPUT_DIR}")
        except Exception as e:
            print(f"Failed to create output directory: {e}")
            return

    # Iterate over all files in the PDF directory
    for filename in os.listdir(PDF_DIR):
        if filename.lower().endswith(".pdf"):
            pdf_path = os.path.join(PDF_DIR, filename)
            print(f"\nProcessing {pdf_path}...")

            # Extract text from PDF
            text = extract_text(pdf_path)

            # Check if text was extracted
            if not text.strip():
                print(f"No text extracted from {pdf_path}. Skipping.")
                continue

            # Process the extracted text with Ollama
            if PROCESSING_TYPE == "summarize":
                output_text = summarize_text(text, OLLAMA_MODEL, OLLAMA_ENDPOINT)
                output_suffix = "_summary.txt"
            elif PROCESSING_TYPE == "extract_emails":
                output_text = extract_emails(text, OLLAMA_MODEL, OLLAMA_ENDPOINT)
                output_suffix = "_emails.txt"
            else:
                print(f"Unknown processing type: {PROCESSING_TYPE}. Skipping.")
                continue

            if not output_text.strip():
                print(f"No output generated for {pdf_path}.")
                continue

            # Save the output to a text file
            output_filename = os.path.splitext(filename)[0] + output_suffix
            output_path = os.path.join(OUTPUT_DIR, output_filename)
            try:
                with open(output_path, "w", encoding="utf-8") as f:
                    f.write(output_text)
                print(f"Output saved to {output_path}")
            except Exception as e:
                print(f"Failed to save output for {pdf_path}: {e}")


